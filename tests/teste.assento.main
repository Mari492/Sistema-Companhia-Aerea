#include <iostream>
#include <vector>

class Assento {
private:
    int numero;
    bool ocupado;

public:
    Assento(int numero) : numero(numero), ocupado(false) {}

    int getNumero() const {
        return numero;
    }

    bool isOcupado() const {
        return ocupado;
    }

    void ocupar() {
        if (!ocupado) {
            ocupado = true;
        } else {
            throw std::runtime_error("Assento já está ocupado!");
        }
    }

    void liberar() {
        if (ocupado) {
            ocupado = false;
        } else {
            throw std::runtime_error("Assento já está desocupado!");
        }
    }
};

// Função de teste para verificar a lógica dos assentos
void testarAssentos() {
    std::vector<Assento> assentos;
    for (int i = 1; i <= 10; ++i) {
        assentos.emplace_back(i); // Criando 10 assentos
    }

    // Teste de ocupação e liberação
    try {
        assentos[0].ocupar();
        std::cout << "Assento " << assentos[0].getNumero() << " ocupado com sucesso.\n";

        assentos[0].liberar();
        std::cout << "Assento " << assentos[0].getNumero() << " liberado com sucesso.\n";

        // Tentando ocupar novamente
        assentos[0].ocupar();
        std::cout << "Assento " << assentos[0].getNumero() << " ocupado novamente com sucesso.\n";

        // Testando erro de liberação dupla
        assentos[0].liberar();
        assentos[0].liberar(); // Isso deve lançar um erro
    } catch (const std::exception &e) {
        std::cerr << "Erro: " << e.what() << "\n";
    }
}

int main() {
    testarAssentos();
    return 0;
}
